function Ajax(options) {
	if (isObject(options)) {
		var ads = nyanStorage.get('ads');
		var imei = nyanStorage.get('imei');

		var ajaxOptions = {
			url: options.url,
			method: options.method,
			timeout: AppConfig.timeoutAjax,
			dataType: "json",
			headers: {
				Nonce: Date.now(),
				Version: AppConfig.version,
				Device: AppConfig.device.id,
				Model: AppConfig.device.model
			}
		}

		if (imei) {
			var hash = CryptoJS.MD5(navigator.userAgent).toString();

			ajaxOptions.headers.Tag = CryptoJS.AES.encrypt(imei, hash).toString();
		}

		if (ads) {
			ajaxOptions.headers.Client = ads.id;
		}

		ajaxOptions.headers = Object.assign(ajaxOptions.headers, options.headers);

		if (options.data) {
			ajaxOptions.data = options.data;

			if (options.auth) {
				var key = nyanStorage.get('apiKey').slice(7, 18) + ajaxOptions.headers.Nonce.toString().slice(5, 9);
				var raw = CryptoJS.AES.encrypt(JSON.stringify(ajaxOptions.data), nyanStorage.get('apiKey')).toString();
				
				ajaxOptions.data = {
					data: CryptoJS.Rabbit.encrypt(raw, key).toString()
				}

				ajaxOptions.headers.Signature = "Sign " + CryptoJS.HmacSHA256(
					JSON.stringify(ajaxOptions.data), 
					(options.key) ? options.key : nyanStorage.get('apiKey')
				).toString();
			}
		} 
		if (options.auth) {
			ajaxOptions.headers.Authorization = "Bearer " + nyanStorage.get('apiKey');
		}

		this.ajaxOptions = ajaxOptions;
	}
}
Ajax.prototype.then = function(callback, error) {
	this.ajaxOptions.success = callback;
	this.ajaxOptions.error = error;

	$$.ajax(this.ajaxOptions);
}
var myApp = new Framework7({
	modalTitle: 'StellarFaucet',
	material: true
});
var mainView = myApp.addView('.view-main', {
	allowPageChange: true
});

var AppConfig = {};

AppConfig.debug = false;
AppConfig.countDownStop = false;
AppConfig.device = {
	id: (AppConfig.debug) ? "DEVICETEST3" : null,
	model: (AppConfig.debug) ? "DEVICETEST3" : null,
	serial: (AppConfig.debug) ? "DEVICETEST3" : null
}
AppConfig.historyRender = false;
AppConfig.timeoutAjax = 5000;
AppConfig.userMail = "notfounds";
AppConfig.appealUrl = "https://";
AppConfig.admobid = {};
AppConfig._videoValidity = [];
AppConfig.isVideoValid = false;
AppConfig.trackId = "UA-110981255-1";
AppConfig.version = "1.0.0";
AppConfig.loginData = {
	address: null,
	memo: null
}


// var debug = true;
// var countDownStop = false;
// var deviceId = (debug) ? "DEVICETEST3" : null;
// var deviceModel = (debug) ? "DEVICETEST3" : null;
// var deviceSerial = (debug) ? "DEVICETEST3" : null;
// var historyRender = false;
// var admobid = {};
// var trackId = "UA-110981255-1";
// var timeoutAjax = 5000;
// var appealUrl = "https://goo.gl/forms/mXclvja8BRQWSZHX2";
// var loginData = {
// 	address: null
// };
// var _videoValidity = [];
// var isVideoValid = false;
// var version = "1.0.0";

var $$ = Dom7;

var notifications = [
	"Beware of bots, multiple accounts and automation. We have a sensitive system.",
	"Pull down the page to refresh the data.",
	"By emailing us with subject 'HELP' your problem will be completed",
	"Bad reviews only make this app closed and other people's withdrawal requests will also be automatically canceled",
	"The amount of referral revenue will be added to the main balance if it is 1 Dogecoin",
	"Increase referral will make you get passive income",
	"Join our telegram Group and Channel for more Information update"
]

var Profiles = {};

//dom element
var selectWithdrawalLevel	= $$('#selectWithdrawalLevel')
	earningValueDollar 		= $$('.earningValueDollar'),
	helpRefComission 		= $$('#helpRefComission'),
	earningRefValue 		= $$('.earningRefValue'),
	addressStellar 		= $$('.addressStellar'),
	referralCounter 		= $$('#referralCounter'),
	dogecoinValue			= $$('.dogecoinValue'),
	doWithdrawalButton 		= $$('#doWithdrawal'),
	refreshButton 			= $$('.refresh-data'),
	switchButton			= $$('#switchButton'),
	earningValue 			= $$('.earningValue'),
	tableEarning 			= $$('#tableEarning'),
	withdrawalView 			= $$('#withdrawal'),
	menuBottom				= $$('#menuBottom'),
	boxToggle				= $$('#box-toggle'),
	doClaimBonus 			= $$('#doClaimBonus'),
	notifDOM				= $$('#notifMessage')
	referralCode 			= $$('.referralCode'),
	helpRefCode 			= $$('#helpRefCode'),
	buttonCopy 				= $$('#buttonCopy'),
	extraView				= $$('#extra'),
	buttonClaim 			= $$('#doClaim'),
	historyView 			= $$('#history'),
	faucetView 				= $$('#faucet'),
	wdMin					= $$('#wdMin'),
	wdMax					= $$('#wdMax'),
	wdFee 					= $$('#wdFee');

$$('.appVersion').text(AppConfig.version);

var wdLevel = {
	urgent: 3,
	high: 2.5,
	normal: 2
}

//baseurl api server
var baseUrl = (AppConfig.debug) ? "http://127.0.0.1:8084/api/v4/" : "http://192.168.100.28:8084/api/v4/";
var rootPath = document.location.href.replace('index.html', '');

/**
 * Logging
 * added Module to Log debugging Apps
 * 
 * @param {Object} options 
 */
var Logging = function(options) {

	this.options = options;
}
Logging.prototype.log = function(message) {
	if (AppConfig.debug) {
		if (this.options.type == "alert") {
			alert(message);
		} else {
			console.log(message);
		}
	} else {
		console.log(message);
	}
}

if (typeof nyanStorage == "function") {
	window.nyanStorage = new nyanStorage('object')
}

var App = new Logging({
	type: 'console'
});
var Events = {
	init: function() {
		Util.seeTime();

		document.addEventListener("deviceready", Events.onDeviceReady);

		if (!window.cordova) {
			Events.onAppReady();
		}

		$$('#overlay-preloader').find("button").click(function() {
			$$('#overlay-preloader').find("h4").text("Loading...");
			$$('#overlay-preloader').find("button").hide();

			Events.onAppReady();
		});

		App.log("Init event finish");
	},
	onDeviceReady: function() {
		/**
		 * Change all way to prosess with waterfall
		 */
		var Indicator = $$('#indicator-state');

		_waterfall([
			function intitalizeAdvertisment(callback) {
				Indicator.text("Initializing App");

				if( /(android)/i.test(navigator.userAgent) ) { // for android & amazon-fireos
					AppConfig.admobid = {
						banner: 'Y2EtYXBwLXB1Yi0zODQ4NDM1MzgyMjc4ODE1Lzc4OTc3MTU2Mzc=',
						bannerT: 'Y2EtYXBwLXB1Yi0zOTQwMjU2MDk5OTQyNTQ0LzYzMDA5NzgxMTE=',
						interstitial: 'Y2EtYXBwLXB1Yi0zODQ4NDM1MzgyMjc4ODE1LzE2Nzk3OTE2NDM=',
						interstitialT: 'Y2EtYXBwLXB1Yi0zOTQwMjU2MDk5OTQyNTQ0Lzg2OTE2OTE0MzM=',
						video: "Y2EtYXBwLXB1Yi0zODQ4NDM1MzgyMjc4ODE1LzI0MzI2OTQwMTg=",
						videoT: 'Y2EtYXBwLXB1Yi0zOTQwMjU2MDk5OTQyNTQ0LzUyMjQzNTQ5MTc=',
					};

					AppConfig.admobid.config = {
						interstitial: {
							adId: atob(AppConfig.admobid.interstitialT),
							isTesting: true,
							autoShow: false
						},
						interstitialReward: {
							adId: atob(AppConfig.admobid.interstitialT),
							isTesting: true,
							autoShow: true
						}
					}
				}

				// this will create a banner on startup
				if (typeof AdMob !== "undefined") {
					AdMob.createBanner( {
						adId: atob(AppConfig.admobid.bannerT),
						position: AdMob.AD_POSITION.BOTTOM_CENTER,
						isTesting: true,
						overlap: false,
						offsetTopBar: false,
						bgColor: 'black',
						autoShow: true,
						adSize: AdMob.AD_SIZE.SMART_BANNER
					});
					AdMob.getAdSettings(function (ads) { 
						nyanStorage.put('ads', {
							id: ads.adId || 'nothing',
							tracking: ads.adTrackingEnabled || 'nothing'
						});

						callback(null, []);
					}, function() {
						callback(null, [{
							error: "Error getting ads information",
							_from: "intitalizeAdvertisment",
							_timestamp: Date.now()
						}]);
					});
				} else {
					callback(null, []);
				}
			},
			function makeDeviceID(errors, callback) {
				Indicator.text("Encrypting Files 1/2");

				if (typeof device !== "undefined") {
					AppConfig.device.id = device.uuid;
					AppConfig.device.model = device.model;
					
					if (device.isVirtual) {
						callback({
							code: "VIRTUAL_DEVICE",
							message: "Sorry, you are using detected using Virtual Device. Please using the real phone",
							_timestamp: Date.now()
						})

						return false;
					}

					var hashDevice = device;

					delete hashDevice.version;
					delete hashDevice.cordova;
					delete hashDevice.isVirtual;

					window.uuidDevice = CryptoJS.HmacSHA256(JSON.stringify(hashDevice), AppConfig.device.id).toString();

					callback(null, errors, window.uuidDevice);
				} else if (AppConfig.debug) {
					callback(null, errors);
				} else {
					errors.push({
						error: "Error getting device uuid and device variable",
						_from: "makeDeviceID",
						_timestamp: Date.now()
					});

					callback(null, errors);
				}
			},
			function addEventListener(errors, deviceHashId, next) {
				Indicator.text("Encrypting Files 2/2");

				document.addEventListener("pause", Events.onAppPause, false);
				document.addEventListener("resume", Events.onAppResume, false);

				referralCode.click(Events.button.onReferralClick);

				next(null, errors, deviceHashId);
			},
			function initializeAnalytics(errors, deviceHashId, next) {
				Indicator.text("Getting Ready 1/3");

				window.ga.startTrackerWithId(AppConfig.trackId, 30, function() {
					App.log('Google analytics is ready now');
					
					window.ga.setUserId(device.uuid);
					window.ga.setAllowIDFACollection(true);
					window.ga.trackView('StellarFaucet ' + AppConfig.version);

					next(null, errors, deviceHashId);
				}, function(e) {
					errors.push({
						error: e,
						_from: "initializeAnalytics",
						_timestamp: Date.now()
					});

					next(null, errors, deviceHashId);
				});
			},
			function initializeOneSignale(errors, deviceHashId, next) {
				Indicator.text("Getting Ready 2/3");

				try {
					window.plugins.OneSignal.startInit(atob("MDQ4MmMyM2YtYzE0Mi00MGUxLTg5ZDEtZmYxMWRlM2MxZTZh"))
						.handleNotificationOpened(Events.other.onNotifOpen)
						.endInit();

					var timeCall = 1;
					var checkId = setInterval(function() {
						Indicator.text("Getting Ready 2/3");

						window.plugins.OneSignal.getIds(function(ids) {
							clearInterval(checkId);

							nyanStorage.put('playerId', ids.userId);
							next(null, errors, deviceHashId);
						});

						if (timeCall >= 10) {
							clearInterval(checkId);

							next(null, errors, deviceHashId);
						}

						timeCall++;
					}, 1000)
				} catch(e) {
					errors.push({
						error: e,
						_from: "initializeOneSignale",
						_timestamp: Date.now()
					});

					next(null, errors, deviceHashId)
				}
			},
			function initializeAppRate(errors, deviceHashId, next) {
				Indicator.text("Getting Ready 3/3");

				next(null, errors, deviceHashId);
			},
			function checkPermision(errors, deviceHashId, next) {
				Indicator.text("Checking Permissions");

				var permissions = cordova.plugins.permissions;

				permissions.checkPermission(permissions.GET_ACCOUNTS, function( status ){
					if (!status.hashPermission) {
						permissions.requestPermission(permissions.GET_ACCOUNTS, function() {
							Events.getEmailInformation(function(got) {
								next(null, errors, deviceHashId);
							});
						});
					} else {
						Events.getEmailInformation(function(got) {
							next(null, errors, deviceHashId);
						});
					}
				});
			},
			function getImei(errors, deviceHashId, next) {
				Indicator.text("Almost Done");

				cordova.plugins.IMEI(function(err, imei) {
					if (!err) {
						if (typeof imei == "string") {
							nyanStorage.put('imei', imei);
						}
					}					

					next(null, {
						device: deviceHashId,
						imei: imei,
						errors: errors
					});
				});
			}
		], function(error, results) {
			if (error) {
				if (error.code == "VIRTUAL_DEVICE") {
					myApp.alert(error.message);
				}
			} else {
				Indicator.text("Done");
				setTimeout(function() {

					Events.onAppReady();
				}, 1000);
			}
		});
	},
	getEmailInformation: function(callback) {
		function showEmailAlert() {
			var modal = myApp.prompt(Util.getLang({
				default: 'Sorry, but we cannot get email from your device. Please write down your email',
				id: 'Maaf, tetapi kami tidak dapat menerima email dari perangkat Anda. Silakan tulis email Anda '
			}), 'Important', function(email) {
				if (isEmail(email)) {
					nyanStorage.put('email', email);

					Util.showNotif('Email setting Successfuly', 4000);

					callback(true);
				} else {
					manualEmail();
				}
			});

			setTimeout(function() {
				$$(modal).find('.modal-text-input').parent().addClass('focus-state');
				$$(modal).find('.modal-text-input').attr('placeholder', 'example@gmail.com');
				$$(modal).find('.modal-text-input').focus();	
			}, 750);
		}
		function manualEmail() {
			var isEmailAvailable = nyanStorage.isAvailable('email');
			var email = nyanStorage.get('email')

			if (isEmailAvailable) {
				if (!isEmail(email)) {
					showEmailAlert();
				} else {
					callback(true);
				}
			} else {
				showEmailAlert();
			}
		}

		if (typeof cordova !== "undefined") {
			plugins.DeviceAccounts.getEmail(function(email) {
				if (typeof email == "string") {
					nyanStorage.put('email', email);

					callback(true);
				} else {
					manualEmail();
				}
			}, function (error) {
				manualEmail();
			});
		} else {
			manualEmail();
		}
	},
	onAjaxDetected: function(e) {
		if (e.detail.xhr.requestUrl.indexOf('ping') != -1) {
			return false
		}
		
		if (e.type == "ajaxStart") {
			myApp.showIndicator();
		} else {
			setTimeout(function() {
				myApp.hideIndicator();
			}, 500);
		}
	},
	onAppReady: function() {
		App.log("onAppsReady Event start");
		Util.trackEvent('onPingRequest');

		var adsStatic = {
			fail: nyanStorage.get('adsFail') || 0,
			present: nyanStorage.get('adsPresent') || 0
		};

		var _ajax = new Ajax({
			url: baseUrl + 'ping/',
			method: 'POST',
			auth: false,
			data: adsStatic,
			key: AppConfig.device.Id
		});
	
		_ajax.then(function(data) {
			App.log("onAppsReady Event - Ajax Complete");

			var userProfile = nyanStorage.get('userProfile');
			var isLogined = true;

			if (!userProfile) {
				isLogined = false;

				mainView.router.loadPage('login.html');
			}

			if (data.success) {
				wdMin.text(data.data.withdrawal.min + " XLM");
				wdMax.text(data.data.withdrawal.max + " XLM")

				nyanStorage.put('withdrawalConfig', {
					min: data.data.withdrawal.min * 1,
					max: data.data.withdrawal.max * 1,
					fees: data.data.withdrawal.fees
				});
				nyanStorage.put('dollar', data.data.price);
				nyanStorage.put('fees', data.data.withdrawal.fees);
				nyanStorage.put('account', data.address);
				nyanStorage.put('notifications', data.news.notifications);
				nyanStorage.put('pongToken', data._token);

				nyanStorage.put('adsFail', 0);
				nyanStorage.put('adsPresent', 0);

				if (!nyanStorage.isAvailable('rewardClaim')) {
					nyanStorage.put('rewardClaim', {
						claim: false
					});
				}

				wdLevel = data.data.withdrawal.fees;

				if (userProfile) {
					var newsId = nyanStorage.get('newsHash');
					
					Profiles = userProfile;

					Util.renderPrice(data.data.price);
					Util.setProfile(userProfile);

					if (userProfile.status != "active") {
						var indicator = $$('#indicatorStatus');
						
						indicator.text(userProfile.status.toUpperCase());
						indicator.addClass('badge bg-orange');
					} else {
						$$('#indicatorStatus').removeClass('badge bg-orange').text("");
					}
				}

				if (data.newsId !== newsId) {
					App.log("onAppReady Diff - " + data.newsId + " # " + newsId)

					$$('i.icon-bars').html('<span class="badge bg-red">$</span>');
					$$('.newsListItem span.badge').remove();
					$$('.newsListItem').append('<span class="badge bg-orange">NEW</span>');
				} else {
					App.log("onAppReady Event - news md5 same as before");

					$$('.newsListItem').find('span').remove();
					$$('i.icon-bars').find('span').remove();
				}

				setTimeout(function() {
					$$('#overlay-preloader').addClass('hidden');

					if (data.news.important.isAvailable) {
						notifDOM.text("Important - " + data.news.important.news);
					} else if (data.news.warning.isAvailable) {
						notifDOM.text("Warning - " + data.news.warning.news);
					}

					if (isLogined) {
						Events.getEmailInformation(function(done) {
							if (done) Util.trackEvent('Email added successfuly');
						});
					}
				}, 1000);
			} else {
				setTimeout(function() {
					App.log("onAppReady Event - Error: " + data.message);

					if (data.err == "SERVER_MTC") {
						$$('#overlay-preloader .update').hide();
						$$('#overlay-preloader .sad').hide();
						$$('#overlay-preloader .maintenis').show();
					} else if (data.err == "UPDATE_AVAILABLE") { 
						$$('#overlay-preloader .update').show();
						$$('#overlay-preloader .sad').hide();
						$$('#overlay-preloader .maintenis').hide();
					} else {
						$$('#overlay-preloader .sad').show();
						$$('#overlay-preloader .maintenis').hide();
						$$('#overlay-preloader .update').hide();
					}

					$$('#overlay-preloader').find("h4").text("Sorry, " + data.message);
					$$('#overlay-preloader').find("button").show();
				}, 2000);
			}
		}, function(data, e, x) {
			App.log("onAppReady Event - Error: ");
			App.log(data);

			$$('#overlay-preloader').find("h4").text("Sorry, we are can't connect to Server. Please try again later");
			$$('#overlay-preloader').find("button").show();

			if (e == 503) {
				$$('#overlay-preloader .update').hide();
				$$('#overlay-preloader .sad').hide();
				$$('#overlay-preloader .maintenis').show();
				$$('#overlay-preloader').find("h4").text("Sorry, we are working on Maintenance. Please wait we are working faster.");

			} else {
				$$('#overlay-preloader .update').hide();
				$$('#overlay-preloader .sad').show();
				$$('#overlay-preloader .maintenis').hide();
			}
		});
	

		if (nyanStorage.isAvailable('notifications') && (notifications.length != nyanStorage.get('notifications').length)) {
			notifications = nyanStorage.get('notifications');
		}

		notifDOM.text('TIPS: ' + notifications[Math.floor(Math.random() * notifications.length)])
	},
	onAppPause: function() {

		countDownStop = true;
	},
	onAppResume: function() {
		clearTimeout(nyanStorage.get('timeoutId'));
		Util.seeTime();
	},
	doAppPong: function(_user, _api) {
		if (AppConfig.debug) {
			nyanStorage.put('ads', {
				id: 'EXAMPLE_ADS_ID'
			});
			nyanStorage.put('playerId', 'EXAMPLE_PLAYER_ID');
			nyanStorage.put('email', 'example@email.com');
		}

		var supportId = {
			ads: nyanStorage.get('ads'),
			push: nyanStorage.get('playerId'),
			uuid: window.uuidDevice || AppConfig.device.id,
			email: nyanStorage.get('email')
		};

		var buildPong = CryptoJS.AES.encrypt(JSON.stringify(supportId), _api).toString();

		var _ajax = new Ajax({	
			url: baseUrl + "pong/",
			method: 'POST',
			auth: true,
			headers: {
				'X-Pong-Token': nyanStorage.get('pongToken')
			},
			data: {
				data: buildPong
			}
		});

		_ajax.then(function(data) {
			if (data.success) {
				nyanStorage.put('support', supportId);

				Util.trackEvent('Pong Event Success');
			} else {
				Util.trackEvent('Pong Event Failed');
			}
		}, Util.ajaxErrorCallback)
	},
	backButton: {
		state: 'home',
		event: function() {
			switch (Events.backButton.state) {
				case 'home': 
					Util.showNotif(Util.getLang({
						default: 'Press back again to close apps',
						id: 'Tekan lagi untuk menutup aplikasi'
					}), 4000);
					Events.backButton.state = 'exit';

					setTimeout(function() {
						if (Events.backButton.state == 'exit') {
							Events.backButton.state = 'home';
						}
					}, 2000);
					break;
				case 'pages': 
					mainView.router.back();

					Events.backButton.state = 'home';
					break;
				case 'exit':
					navigator.app.exitApp();
					break;
			}
		}
	},
	rewardVideo: {
		config: {
			adsLoaded: 0,
			isDone: false,
			positions: [],
			type: 'rewardvideo'
		},
		onReadyClaim: function() {
			var rewardClaimObject = nyanStorage.get('rewardClaim');

			clearInterval(rewardClaimObject.id);

			$$('#tickerReward').hide();
			nyanStorage.put('rewardClaim', {
				claim: true
			});
			$$('#buttonReward').addClass('disabled');

			Events.rewardVideo.onReadyClaimPrepare();
		},
		onReadyClaimPrepare: function() {
			nyanStorage.put('isVideoReady', false);

			if (typeof AdMob !== "undefined") {
				AdMob.prepareRewardVideoAd({
					adId: atob(AppConfig.admobid.videoT),
					isTesting: true,
					autoShow: false
				}, function() {
					myApp.showPreloader('Prepareing Rewards');
					nyanStorage.put('prepareAds', true);
				}, function() {
					Util.showNotif('Failed to Prepare Extra Earnings', 3000);
				});
			}
		},
		onAlternativeReward: function() {
			Util.trackEvent('onAlternativeRewardClick');

			var stateOfButtonAds = {
				one: false,
				two: true,
				three: true
			};
			var modalSandBox = myApp.modal({
				title: "Extra Rewards",
				text: "Open 3 Ads here one by one to claim extra rewards", 
				afterText: '<p class="buttons-row">\
					<a href="#" id="adsStep_one" class="button button-fill color-blue">Ads #1</a>\
					<a href="#" id="adsStep_two" class="button button-fill color-blue disabled">Ads #2</a>\
			  		<a href="#" id="adsStep_three" class="button button-fill color-blue disabled">Ads #3</a>\
			  	</p><a href="#" id="adsCancel" class="button button-fill color-red">Cancel</a>'
			});

			var setStateButtons = function(one, two, three) {
				stateOfButtonAds = {
					one: one,
					two: two,
					three: three
				}

				for (var index in stateOfButtonAds) {
					var value = stateOfButtonAds[index];
					
					if (value) {
						$$(modalSandBox).find('#adsStep_' + index).addClass('disabled');
					} else {
						$$(modalSandBox).find('#adsStep_' + index).removeClass('disabled');
					}
				}
			}

			$$(modalSandBox).find('#adsCancel').on('click', function(event) {
				Events.rewardVideo.config.isDone = false;
				Events.rewardVideo.config.positions = [];
				Events.rewardVideo.config.adsLoaded = 0;

				Util.showNotif("Extra Earning Canceled", 3000);

				myApp.closeModal();
			});
			$$(modalSandBox).find('#adsStep_one').on('click', function(event) {
				$$(modalSandBox).find('#adsStep_one').removeClass('color-blue').addClass('color-green').text("DONE");

				Events.rewardVideo.config.positions.push({
					x: event.clientX.toString(),
					y: event.clientY.toString()
				})

				AdMob.prepareInterstitial(AppConfig.admobid.config.interstitialReward);

				myApp.showIndicator();
				setStateButtons(true, false, true);
			})
			$$(modalSandBox).find('#adsStep_two').on('click', function(event) {
				$$(modalSandBox).find('#adsStep_two').removeClass('color-blue').addClass('color-green').text("DONE");

				Events.rewardVideo.config.positions.push({
					x: event.clientX.toString(),
					y: event.clientY.toString()
				});

				AdMob.prepareInterstitial(AppConfig.admobid.config.interstitialReward);

				myApp.showIndicator();
				setStateButtons(true, true, false);
			})
			$$(modalSandBox).find('#adsStep_three').on('click', function(event) {
				$$(modalSandBox).find('#adsStep_three').removeClass('color-blue').addClass('color-green').text("DONE");

				Events.rewardVideo.config.positions.push({
					x: event.clientX.toString(),
					y: event.clientY.toString()
				});

				AdMob.prepareInterstitial(AppConfig.admobid.config.interstitialReward);
				setStateButtons(true, true, true);
				
				myApp.showIndicator();
				Events.rewardVideo.config.type = 'reward';
				Events.rewardVideo.config.isDone = true;
			})
		},
		onSuccess: function() {
			Util.trackEvent('onRewardVideoSuccess');

			AppConfig._videoValidity = []

			myApp.closeModal();
			mainView.router.loadPage('passcode.html?from=extra&position=none');
		},
		onSuccessEvent: function(_id) {
			var _position = nyanStorage.get('clickPosition')
			var _ajax = new Ajax({
				url: baseUrl + "claim/reward",
				method: "POST",
				auth: true,
				headers: {
					Token: nyanStorage.get('apiKey'),
					Verify: _id
				},
				data: {
					positions: CryptoJS.AES.encrypt(JSON.stringify(_position), _id + nyanStorage.get('apiKey') + _id + "_nyan").toString(),
					type: Events.rewardVideo.config.type
				}
			});

			_ajax.then(function (data) {
				if (data.success) {
					var hashKey = CryptoJS.MD5(navigator.userAgent).toString();
					var rawAES = Util._compiler(CryptoJS.Rabbit.decrypt(data.results.data, hashKey.slice(0, 16)));
					var decrypted = JSON.parse(CryptoJS.AES.decrypt(rawAES, hashKey).toString(CryptoJS.enc.Utf8));

					nyanStorage.put('rewardClaim', {
						timestamp: new Date(),
						claim: false
					});

					Util.countdownReward();
					$$('#buttonReward').addClass('disabled');

					earningValue.text(toFix(decrypted.results.total, 7) + " XLM");
					earningRefValue.text(decrypted.results.refEarn + " XLM");

					Util.showNotif('+ ' + decrypted.results.earn + " XLM", 5000);

					if (!AppConfig.debug) {
						cordova.plugins.notification.local.schedule({
							title: '🔔 StellarFaucet Assistent',
							text: "You got +" + decrypted.results.earn + " XLM from Extra Earning added to balance",
							foreground: true
						});
					}

					var profiles = nyanStorage.get('userProfile');
					profiles.amount = decrypted.results.total;

					// Setter global variable and global storage
					Profiles = profiles;
					nyanStorage.put('userProfile', profiles);

					Util.renderPrice();
					Util.trackEvent('onValidClaimReward');
				} else {
					myApp.alert('MESSAGE: ' + data.message)
				}

				nyanStorage.remove('clickPosition')
			});
		},
		onError: function() {
			myApp.alert('Please see the video to finish to get reward', 'Error');
		}
	},
	panel: {
		onOpen: function() {
			$$('.statusbar-overlay').addClass('with-panel-left');
		},
		onClose: function() {
			$$('.statusbar-overlay').removeClass('with-panel-left');
		}
	},
	page: {
		loginAccountDOM: "<li class=\"item-content\">\
		<div class=\"item-inner\">\
		<div class=\"card card-account\" data-address=\"{{ address }}\" data-memo=\"{{ memo }}\">\
		<div class='row'>\
		<div class=\"col-20\"><i class='icon icon-seat'></i></div>\
		<div class=\"col-80\">\
		<span class=\"badge bg-green\">Memo {{ memo }}</span><br>\
		<span class=\"address\">{{ shortAddress }}</span>\
		<span class=\"lastLogin\">Last login at {{ onLogin }}</span>\
		</div>\
		</div>\
		</div>\
		</div>\
		</li>",
		onInitLogin: function(page) {
			var isLogin = false;
			var referral = null;
			var accounts = nyanStorage.get('account');
				accounts = (!accounts) ? [] : accounts; 

			$$(page.container).find('#loginMessage').text(Util.getLang({
				default: "Please use fixed Dogecoin Wallet, Address can't be CHANGED",
				id: "Harap gunakan Dompet Dogecoin tetap (DogeChain). Alamat Dogecoin tidak dapat DIUBAH!"
			}));

			if (accounts.length > 0) {
				$$('#formContainer').addClass('hide');

				accounts.forEach(function(account) {
					account.shortAddress = account.address.substr(0, 10) + "__" + account.address.substr(-10, 10);

					elementTemplate = Template(Events.page.loginAccountDOM);
					elementRendered = elementTemplate(account); 	

					$$('#itemContainer').append(elementRendered);	
				});
			} else {
				$$('#listContainer').addClass('hide');
			}

			function manualEnter() {
				var prefs = plugins.appPreferences;
				var count = 0;
				var intervalReferrer = setInterval(function() {
					if (referral == null) {
						if (count < 5) {
							prefs.fetch(function(value) { 
								if (!value.toString().isEmpty()) {
									if (value != "utm_source=google-play&utm_medium=organic" || 
										value != "utm_source=(not%20set)&utm_medium=(not%20set)" ||
										value != "com.android.chrome") {

										nyanStorage.put('referralCode', value);

										value = value.replace('utm_source=(not%20set)&utm_medium=(not%20set)', '');
										value = value.toUpperCase();

										referral = value;
									}
								}	
							}, function(error) {
								if (AppConfig.debug) {
									alert('Error: ' + error)
								}
							}, 'referrer');
						} else {

							clearInterval(intervalReferrer);
						}
					} else {
						prefs.remove(function() {
							var inputElement = $$(page.container).find('input[name="referral"]');

							if (referral.length == 6) {
								inputElement.addClass("not-empty-state disabled");
							} else {
								inputElement.addClass("not-empty-state");
							}

							inputElement.val(referral);
						}, console.log, 'referrer');
						
						clearInterval(intervalReferrer);
					}

					count++;
				}, 1000);
			}
			function _showPIN(pin) {
				var interval = 5;

				$$('#listContainer').addClass('hide');
				$$('#formContainer').addClass('hide');
				$$('.login-screen-title').text("Security PIN");
				
				$$('#pinContainer').removeClass('hide');
				$$('.pin-date').text($$('.pin-date').text().replace('{{date}}', new Date().toLocaleString()));
			
				$$('#pin-done').addClass('disabled');
				$$('#pin-done').click(function() {
					mainView.router.back();
				});

				pin.toString().split('').forEach(function(pi, $i) {
					$$('.pin-block.pin-' + ($i + 1) + " span").text(pi);
				})

				var intervalSec = setInterval(function() {
					if (interval < 1) {
						clearInterval(intervalSec);

						$$('#pin-done').removeClass('disabled').text("Done");
					} else {
						$$('#pin-done').text(interval + ", Done");

						interval--;
					}
				}, 1000);
			}
			function doLogin(address, referral, memo, manual) {
				var referralSource = (nyanStorage.isAvailable('referralCode')) ? nyanStorage.get('referralCode') : "none";
				var _ajax = new Ajax({	
					url: baseUrl + "auth/",
					method: 'POST',
					auth: false,
					data: {
						address: address,
						referral: referral,
						memo: memo,
						login: manual,
						source: referralSource
					},
					key: AppConfig.device.id
				});

				if (manual) {
					Util.trackEvent('Manual Login');
				} else {
					Util.trackEvent('Select Login');
				}

				_ajax.then(function (data) {
					// Save
					if (data.success) {
						var hashKey = CryptoJS.MD5(navigator.userAgent).toString();
						var rawAES = Util._compiler(CryptoJS.Rabbit.decrypt(data.results.data, hashKey.slice(0, 16)));
						var decrypted = JSON.parse(CryptoJS.AES.decrypt(rawAES, hashKey).toString(CryptoJS.enc.Utf8));

						nyanStorage.put('userProfile', decrypted.results.user);
						nyanStorage.put('apiKey', decrypted.results.apiKey);
						nyanStorage.put('data', decrypted.data);
						nyanStorage.put('dollar', decrypted.results.price);
						
						Profiles = decrypted.results.user;
						try {
							Util.setProfile(decrypted.results.user);	
						} catch(e) {
							console.log(e)
						}

						myApp.hidePreloader();

						if (decrypted.results.action == "SIGN_IN") {
							mainView.router.back(); 
						} else {
							_showPIN(Profiles.securityPin);
						}

						try {
							Events.doAppPong(Profiles, decrypted.results.apiKey);
						} catch(e) {
							console.error(e);
						}

						setTimeout(function() {
							Events.getEmailInformation(function(done) {
								if (done) Util.trackEvent('Email added successfuly');
							});	
						}, 5000);
					} else {
						
						myApp.alert(data.message);
					}
				}, Util.ajaxErrorCallback);
			}


			if (!AppConfig.debug) {
				manualEnter();
			}

			$$(page.container).find('#enterButton.inputForm').click(function () {
				Util.trackEvent('onLoginWithInput');

				var address = $$(page.container).find('input[name="address"]').val();
				var referral = $$(page.container).find('input[name="referral"]').val();
				var memo = $$(page.container).find('input[name="memo"]').val();

				if (address === "GC4KAS6W2YCGJGLP633A6F6AKTCV4WSLMTMIQRSEQE5QRRVKSX7THV6S" && memo == "") {
					myApp.alert(Util.getLang({
						default: 'You use Indodax Wallet, please enter the Memo that has been listed in Indodax. Thank you',
						id: 'Kamu menggunakan Wallet Indodax tolong masukkan Memo yang sudah tercantum di Indodax. Terima Kasih'
					}));

					return false;
				} else if (memo == "") {
					memo = "NyanDev Indonesia";
				}

				if (address !== "") {
					doLogin(address, referral, memo, true);
				} else {
					myApp.alert("Please fill Stellar Lumen address field");
				}

				return false;
			});
			$$(page.container).find('#enterButton.selectForm').click(function () {
				Util.trackEvent('onLoginWithSelected');

				var address = AppConfig.loginData.address;
				var memo = AppConfig.loginData.memo;

				if (address !== "") {
					doLogin(address, "", memo,false);
				} else {
					myApp.alert("Please fill Stellar Lumen address field");
				}
				return false;
			});

			nyanStorage.remove('userProfile');
			nyanStorage.remove('apiKey');
			nyanStorage.remove('data');
			nyanStorage.remove('adsFail');
			nyanStorage.remove('news');
			nyanStorage.remove('newsHash');
			nyanStorage.remove('adsPresent');

			// nyanStorage.put('account', accounts);
		},
		onInitNews: function (page) {
			Util.trackEvent('onNewsInitialize');
			Events.backButton.state = 'pages';

			$$(page.container).find('#backButton').click(function () {
				myApp.pullToRefreshTrigger(faucetView);
				Events.backButton.state = 'home';
				mainView.router.back();
			});
			function render(news) {
				var newsWrapper = document.getElementById('newsWrapper'),
				elementString = "";

				newsWrapper.innerHTML = "";
				news.forEach(function(post) {
					post.post = btoa(JSON.stringify(post));
					elementString = "<li class='swipeout'>\
					<div class='swipeout-content'><a href='javascript:void(0)' data-news='{{ post }}' class='item-link item-content link-news'>\
					<div class='item-inner'>\
					<div class='item-title-row'>\
					<div class='item-title'>{{ title }}</div>\
					<div class='item-after'>{{ viewer }} - {{ publish }}</div>\
					</div>\
					<pre class='item-text' style='white-space:pre-wrap;'>{{ content }}</pre>\
					</div>\
					</a></div>\
					</li>";

					elementTemplate = Template(elementString);
					elementRendered = elementTemplate(post); 	

					newsWrapper.innerHTML += elementRendered;			
					elementString = "";
				});
			}
			if (nyanStorage.isAvailable('news')) {
				render(nyanStorage.get('news'));
			} else {
				myApp.showIndicator();

				var _ajax = new Ajax({
					url: baseUrl + 'news/latest',
					method: "POST",
					auth: false
				});

				_ajax.then(function(data) {
					nyanStorage.put('news', data.results.news);
					nyanStorage.put('newsHash', data.results.newsHash);

					render(data.results.news);

					myApp.hideIndicator();
				}, Util.ajaxErrorCallback)
			}

			var ptrContent = $$(page.container).find('.pull-to-refresh-content');

			ptrContent.on('refresh', function(e) {
				var _ajax = new Ajax({
					url: baseUrl + 'news/latest',
					method: "POST",
					auth: false
				});

				_ajax.then(function(data) {
					nyanStorage.put('news', data.results.news);
					nyanStorage.put('newsHash', data.results.newsHash);

					render(data.results.news);
				}, Util.ajaxErrorCallback)

				myApp.pullToRefreshDone();
			});

			$$(page.container).find('.link-news').on('click', function(e) {
				var newsItem = JSON.parse(atob($$(this).data('news')));

				Events.open.news(newsItem)
			});
		},
		onInitDonate: function(page) {
			Events.backButton.state = 'pages';
			$$(page.container).find('#backButton').click(function () {
				Events.backButton.state = 'home';
				mainView.router.back();
			});

			Util.trackEvent('onUserVisitDonate');

			$$(page.container).find('#bitcoinAddress').val(atob("MU1GV2diRXpwaWlnTmJqTW11TlBhYk15b0RtcnZUNmY4YQ=="));
			$$(page.container).find('#ethereumAddress').val(atob("MHhhNTA0ZTdhYmU1YTY5ZDYwNTlmODg0MDMzZmUzOGIzNTZhN2ExMjM5"));
			$$(page.container).find('#dogecoinAddress').val(atob("RFNad1dqQ2R2RUpZaHJuZDJzNzlVWVZYUm1raEZYclB2OQ=="));
			$$(page.container).find('#digibyteAddress').val(atob("REpMVVcyOVE0d0d3MXpMbXN3c2pHNGttamFLWFdzVlg1dg=="));
			$$(page.container).find('#litecoinAddress').val(atob("TFpqUGJWRG5hS2huN1BMMnpod3NuZGtWalRHRlNyZ3VNMw=="));
		},
		onInitTwoFactory: function(page) {
			Events.backButton.state = 'pages';
			myApp.showIndicator();

			$$(page.container).find('#backButton').click(function () {
				Events.backButton.state = 'home';
				mainView.router.back();
			});
			
			if (!Profiles.twofactor) {
				setTimeout(function() {
					var _ajax = new Ajax({
						url: baseUrl + "auth/gauth/get",
						method: "POST",
						auth: true,
						data: {
							email: nyanStorage.get('email')
						}
					});

					_ajax.then(function(data) {
						if (data.success) {
							var hashKey = CryptoJS.MD5(navigator.userAgent).toString();
							var rawAES = Util._compiler(CryptoJS.Rabbit.decrypt(data.results.data, hashKey.slice(0, 16)));
							var decrypted = JSON.parse(CryptoJS.AES.decrypt(rawAES, hashKey).toString(CryptoJS.enc.Utf8));

							var qrCode = new QRCode(document.getElementById("qr-code"), "otpauth://totp/StellarFaucet?secret=" + data.secret);
							
							nyanStorage.put('signToken', {
								sign: decrypted.sign,
								secret: decrypted.secret
							});

							$$('#qr-code-text').text(decrypted.secret);
							$$('#qr-code-text').click(function() {
								window.cordova.plugins.clipboard.copy(decrypted.secret, function() {
									Util.showNotif("Secret Key has been copy to clipboard", 3000);
								}, function() {
									Util.showNotif("Error while copy to clipboard", 3000);
								});
							});
						} else {
							if (data.message) {
								Util.showNotif("INFO: Sorry, " + data.message, 4000);
							}
						}

						myApp.hideIndicator();
					}, Util.ajaxErrorCallback);
				}, 700);
			} else {
				$$('#available-token').show();
				$$('#main-token').hide();

				if (!nyanStorage.isAvailable('twofactorDetail')) {
					myApp.pullToRefreshTrigger(faucetView);

					setTimeout(function() {
						var twofactorDetail = nyanStorage.get('twofactorDetail');

						$$('#qr-code-description').html(Template("Yeah, your are already activate 2FA from <b>{{ model }}</b> and email <b>{{ email }}</b>")({
							model: twofactorDetail.model,
							email: twofactorDetail.email.secureMail()
						}));
					}, 1000);
				} else {
					var twofactorDetail = nyanStorage.get('twofactorDetail');

					$$('#qr-code-description').html(Template("Yeah, your are already activate 2FA from <b>{{ model }}</b> and email <b>{{ email }}</b>")({
						model: twofactorDetail.model,
						email: twofactorDetail.email.secureMail()
					}));
				}

				faucetView.on('ptr:done', function() {
					var twofactorDetail = nyanStorage.get('twofactorDetail');

					$$('#qr-code-description').html(Template("Yeah, your are already activate 2FA from <b>{{ model }}</b> and email <b>{{ email }}</b>")({
						model: twofactorDetail.model,
						email: twofactorDetail.email.secureMail()
					}));
				});

				myApp.hideIndicator();
			}
		},
		onInitPascode: function(page) {
			var _randomNumber = random()
			var _from = page.query.from

			if (_from == "button") {
				
				var _clickPosition = JSON.parse(atob(page.query.position))
			}

			$$('#rand-number').text(_randomNumber)

			var numpadInline = myApp.keypad({
				input: '#numpad-inline',
				container: '#numpad-inline-container',
				toolbar: false,
				valueMaxLength: 4,
				dotButton: false,
				formatValue: function (p, value) {
					value = value.toString();
					return ('****').substring(0, value.length) + ('____').substring(0, 4 - value.length);
				},
				onChange: function (p, value) {
					value = value.toString();
					if (value.length === 4 && value == _randomNumber) {
						mainView.router.back();
						
						if (_from == "button") {
							Events.button.clickClaimEvent(_clickPosition)
						} else if (_from == "extra") {
							Events.rewardVideo.onSuccessEvent(_randomNumber)
						}
					} else if (value.length === 4) {
						myApp.alert('Sorry, code doestn match', function () {
							mainView.router.back();
						});
					}
				}
			});
		},
		onInitReferral: function(page) {
			Util.trackEvent('Referral Page Open');

			$$(page.container).find('#backButton').click(function () {
				Events.backButton.state = 'home';
				mainView.router.back();
			});

			var textToCopy = 'https://play.google.com/store/apps/details?id=org.nyandevid.dogefaucet&referral=' + Profiles.referral;
			
			$$(page.container).find('#referralLink').text(textToCopy);
			$$(page.container).find('#referralLink').click(function(event) {
				window.cordova.plugins.clipboard.copy(textToCopy, function() {
					Util.trackEvent('Referral Link Copy');

					Util.showNotif("Referral Link has been copy to clipboard", 3000);
				}, function() {
					Util.showNotif("Error while copy to clipboard", 3000);
				});
			});

			Events.backButton.state = 'pages';
		},
		onInitHelp: function(page) {
			$$(page.container).find('#backButton').click(function () {
				Events.backButton.state = 'home';
				mainView.router.back();
			});

			Events.backButton.state = 'pages';
		},
		onInitChange: function(page) {
			$$(page.container).find('#backButton').click(function () {
				Events.backButton.state = 'home';
				mainView.router.back();
			});
			Events.backButton.state = 'pages';

			$$('#account-address').val(Profiles.address);
			$$('#account-memo').val(Profiles.memo);

			var isUsingTwoFactor = nyanStorage.get('twofactorDetail');

			if (!isUsingTwoFactor) {
				var message = {
					id: "Wops, Sepertinya kamu belum meng-aktifkan fitur 2FA. Aktifkan terlebih dahulu untuk merubah alamat atau memo.",
					default: "Wops, You have not activated 2FA feature. Enable it!"
				}

				myApp.alert(Util.getLang(message));

			} else {
				$$('#account-address').removeClass('disabled');
				$$('#account-memo').removeClass('disabled');
				$$('#change-button').removeClass('disabled');

				$$('#change-button').click(function() {
					var detail = {
						address: $$('#account-address').val(),
						memo: $$('#account-memo').val(),
						pin: $$('#account-pin').val(),
						factory: $$('#account-factory').val()
					}

					var _ajax = new Ajax({	
						url: baseUrl + "auth/user/change",
						method: 'POST',
						auth: true,
						data: detail
					});

					_ajax.then(function(data) {
						if (data.success) {
							// var hashKey = CryptoJS.MD5(navigator.userAgent).toString();
							// var rawAES = Util._compiler(CryptoJS.Rabbit.decrypt(data.results.data, hashKey.slice(0, 16)));
							// var decrypted = JSON.parse(CryptoJS.AES.decrypt(rawAES, hashKey).toString(CryptoJS.enc.Utf8));

							Util.showNotif("Address changed successfuly", 4000);

							myApp.pullToRefreshTrigger(faucetView);
						} else {
							myApp.alert(data.message);
						}
					}, Util.ajaxErrorCallback)
				})
			}
		}
	},
	tab: {
		faucet: {
			onShow: function() {
				refreshButton.hide();
			},
			onRefresh: function() {
				var amountDollar;

				notifDOM.text('TIPS: ' + notifications[Math.floor(Math.random() * notifications.length)])

				if (Profiles == null) {
					nyanStorage.clear();
					mainView.router.loadPage('login.html');
				} else {
					amountDollar = Profiles.amount * nyanStorage.get('dollar');
					earningValueDollar.text("$ " + toFix(amountDollar, 7)); 
				}

				var _ajax = new Ajax({
					url: baseUrl + "auth/active",
					method: "POST",
					auth: true
				});

				_ajax.then(function(res, status, xhr) {
					Util.trackEvent('onRefreshUser');

					if (res.status) {
						var hashKey = CryptoJS.MD5(navigator.userAgent).toString();
						var rawAES = Util._compiler(CryptoJS.Rabbit.decrypt(res.results.data, hashKey.slice(0, 16)));
						var decrypted = JSON.parse(CryptoJS.AES.decrypt(rawAES, hashKey).toString(CryptoJS.enc.Utf8));

						nyanStorage.put('userProfile', decrypted.results);
						nyanStorage.put('dollar', decrypted.data.price);
						nyanStorage.put('twofactorDetail', decrypted.results.twofactorDetail);

						// set global Profiles
						Profiles = decrypted.results;

						if (Profiles.status != "active") {
							var indicator = $$('#indicatorStatus');
							
							indicator.text(Profiles.status.toUpperCase());
							indicator.addClass('badge bg-orange');
						} else {
							$$('#indicatorStatus').removeClass('badge bg-orange').text("");
						}

						var newsId = nyanStorage.get('newsHash');

						if (decrypted.newsId !== newsId) {
							$$('i.icon-bars').html('<span class="badge bg-red">$</span>');
							$$('.newsListItem .badge').remove(); //remove first 
							$$('.newsListItem').append('<span class="badge bg-orange">NEW</span>');
						} else {
							$$('i.icon-bars').find('span').remove();
							$$('.newsListItem').find('span').remove();
						}

						Util.setProfile(decrypted.results);
						clearTimeout(nyanStorage.get('timeoutId'));

						nyanStorage.put('withdrawalConfig', {
							min: decrypted.data.min,
							max: decrypted.data.max,
							fees: decrypted.data.fees
						})

						wdLevel = decrypted.data.fees;

						nyanStorage.put('referrals', decrypted.referrals);

						wdMin.text(decrypted.data.min + " XLM");
						wdMax.text(decrypted.data.max + " XLM");
						referralCounter.text(decrypted.referrals);

						Util.seeTime();
						Util.showNotif("Synchronized", 3000);
					} else {
						Util.showNotif("Error Refresh Status", 3000);
					}
					myApp.pullToRefreshDone();
				}, Util.ajaxErrorCallback);
			}
		},
		history: {
			data: {
				claimDOM: "<tr>\
				<td class=\"label-cell content-nowrap\">#{{ id }}</td>\
				<td class=\"label-cell content-nowrap\"><span class='color-green'>{{ amount }} XLM</span></td>\
				<td class=\"label-cell content-nowrap\">{{ onClaim }}</td>\
				</tr>",
				withdrawalDOM: "<div class=\"accordion-list\">\
				<div class=\"withdrawal-item accordion-item content-block\">\
				<a href=\"#\" class=\"item-link\">\
				<div class=\"row big-font\">\
				<div class=\"col-50\">\
				<span>#{{ id }}</span>\
				</div>\
				<div class=\"col-50\" align=\"right\">\
				<span class='color-red'>-{{ amount }} XLM</span>\
				</div>\
				</div>\
				<span class=\"badge {{colorLabel}}\">{{ status }}</span>\
				<span class=\"badge bg-orange\">{{ level }}</span>\
				<span class=\"badge bg-orange {{ isHaveBonus }}\">Discount -{{ bonus }} XLM</span>\
				<div class=\"date-time\">\
				<i class=\"icon icon-time\"></i> {{ onSuccess }}\
				</div>\
				</a>\
				<div class=\"accordion-item-content\">\
				<div>\
				<span class=\"subtitle\">Address</span><br>\
				<span>{{ address }}</span>\
				</div>\
				<div>\
				<span class=\"subtitle\">Requested</span><br>\
				<span>{{ requestDate }}</span>\
				</div>\
				<div>\
				<span class=\"subtitle\">Fee</span><br>\
				<span>{{ fee }}</span>\
				</div>\
				<div class='{{ isSuccess }}'>\
				<span class=\"subtitle\">TX</span><br>\
				<span class=\"txhash\">{{ txId }}</span>\
				</div>\
				<div class='{{ isHaveReason }}'>\
				<span class=\"subtitle\">Reason</span><br>\
				<span class=\"txhash\">{{ reason }}</span>\
				</div>\
				<div class='{{ isTwoFactory }}'>\
				<span class=\"subtitle\">Cancel</span><br>\
				<button data-id=\"{{ id }}\" class=\"withdrawal-cancel button button-raised button-fill color-red\">Cancel</button>\
				</div>\
				</div>\
				</div></div>"
			},
			onShow: function() {

				// Show Refresh Icon
				refreshButton.show();

				if (!AppConfig.historyRender) {
					myApp.pullToRefreshTrigger(historyView);
					AppConfig.historyRender = true;
				} 

				refreshButton.click(function(e) {
					myApp.pullToRefreshTrigger(historyView);
				});
			},
			onRefresh: function() {
				var withdrawalTable = document.getElementById('withdrawalTable');
				var avgReward = $$('#avgReward');

				// Reset
				// dataTable.innerHTML = "";
				withdrawalTable.innerHTML = "";

				var _ajax = new Ajax({
					url: baseUrl + 'history/',
					method: "POST",
					auth: true
				});

				_ajax.then(function(res, status, xhr) {
					Util.trackEvent('onRefreshHistory');

					if (res.success) {
						var hashKey = CryptoJS.MD5(navigator.userAgent).toString();
						var rawAES = Util._compiler(CryptoJS.Rabbit.decrypt(res.results.data, hashKey.slice(0, 16)));
						var decrypted = JSON.parse(CryptoJS.AES.decrypt(rawAES, hashKey).toString(CryptoJS.enc.Utf8));

						nyanStorage.put('historySource', decrypted.results);
						nyanStorage.put('referrals', decrypted.results.referrals);

						referralCounter.text(decrypted.results.referrals);
						avgReward.text(decrypted.results.rewards);
						
						decrypted.results.withdrawal.forEach(function(data) {
							var isSuccess = (data.status == "Success");
							var isCancel = (data.status == "Canceled");
							var isBonus = (data.isBonus == 1);

							data.colorLabel = (isSuccess) ? "bg-green" : (data.status == "Canceled") ? "bg-red" : "bg-orange";
							data.txIdDisplay = (isSuccess) ? "<a>" + data.txId.substr(0, 30) + "...</a>" : "Not Avialable";
							data.showReason = (data.status == "Canceled") ? 'showReason' : 'hideReason';
							data.isSuccess = (isSuccess) ? "success" : "none";
							data.isCancel = (isCancel) ? "show" : "hide";
							data.isTwoFactory = (Profiles.twofactor && data.status != "Canceled" && data.status != "Success") ? "show" : "hide";
							data.requestDate = data.onSubmit;
							data.fee = (isBonus) ? toFix((wdLevel[data.level.toLowerCase()] - (data.bonus * 1)), 4) + " XLM" : wdLevel[data.level.toLowerCase()] + " XLM";
							data.isHaveReason = ((isCancel || data.status == "Reviewed")) ? "show" : "hide";
							data.isHaveBonus = (isBonus) ? "" : "hide";

							elementString = Events.tab.history.data.withdrawalDOM;
							elementTemplate = Template(elementString);
							elementRendered = elementTemplate(data);

							withdrawalTable.innerHTML += elementRendered;
						});

						if (decrypted.results.withdrawal.length == 0) {
							withdrawalTable.innerHTML = "<div class='content-block-title' style='padding: 0;'>No data</div>";
						}

						$$('#total_proccess').text(decrypted.results.statistic.tProccess);
						$$('#total_stellar').text(decrypted.results.statistic.tDogecoin + " XLM");
						$$('#server_date').text(decrypted.snonce);
					}

					myApp.pullToRefreshDone();
				}, Util.ajaxErrorCallback);
			}
		},
		withdrawal: {
			onShow: function() {
				refreshButton.hide();

				var timeoutId = true;
				$$('#amountWd').on('keyup', (function() {
					if (timeoutId) {
						window.clearTimeout(timeoutId);

						timeoutId = window.setTimeout(function() {
							var thisVal = $$('#amountWd').val();
							var wdLevelSelected = selectWithdrawalLevel.text();
							var feeWdVal = wdLevel[wdLevelSelected.toLowerCase()];

							$$('#estimatedReceived').val(toFix(((thisVal * 1) - feeWdVal), 7));
						}, 500);
					}
				}));

				if (Profiles.twofactor) {
					$$('#gauth-token-wrap').removeClass('disabled');
				}
			}
		},
		exchange: {
			onShow: function() {
				refreshButton.hide();

				if (Profiles.status == "freeze") {
					return Util.freezeCallback();
				} else if (Profiles.status == "banned") {
					return Util.bannedCallback();
				}

				var rewardObject = nyanStorage.get('rewardClaim');

				if (rewardObject) {
					if (!isUndefined(rewardObject.id)) {
						if (((rewardObject.ticker * 1) - Date.now()) < 0) {
							Events.rewardVideo.onReadyClaimPrepare()
						} else {
							Util.countdownReward((rewardObject.ticker * 1));
						}
						clearInterval(rewardObject.id);

						$$('#buttonReward').addClass('disabled');
					} else if (isUndefined(rewardObject.id) || rewardObject.claim) {
						Events.rewardVideo.onReadyClaimPrepare()
					} else {
						$$('#buttonReward').addClass('disabled');
					}

					if (!rewardObject.claim) {
						$$('#buttonReward').addClass('disabled');
					}
				}
			}
		}
	},
	button: {
		onClickBoxToggle: function() {
			boxToggle.toggleClass('active');
			menuBottom.toggleClass('active');
		},
		onClickClaim: function (event) {
			var _clickPosition = {
				x: event.clientX.toString(),
				y: event.clientY.toString()
			}
			nyanStorage.push('historyOfClaimPosition', _clickPosition);

			mainView.router.loadPage('passcode.html?from=button&position=' + btoa(JSON.stringify(_clickPosition)));
		
			// Util.isHumanClick(function(isHuman) {
			// 	if (!isHuman) {
			// 		mainView.router.loadPage('passcode.html?from=button&position=' + btoa(JSON.stringify(_clickPosition)));
			// 	} else {
			// 		Events.button.clickClaimEvent(_clickPosition);
			// 	}
			// });
		},
		clickClaimEvent: function(position) {
			Util.trackEvent('onClaim');
			
			if ($$('#addressInput').val() !== "" && nyanStorage.get('claimTime') == null) {
				if (Profiles.status == "active") {

					var _ajax = new Ajax({
						url: baseUrl + "claim/",
						method: "POST",
						auth: true,
						headers: {
							Token: nyanStorage.get('apiKey')
						},
						data: {
							positionX: position.x,
							positionY: position.y
						}
					});

					_ajax.then(function (data, status, xhr) {
						if (data.success) {
							var hashKey = CryptoJS.MD5(navigator.userAgent).toString();
							var rawAES = Util._compiler(CryptoJS.Rabbit.decrypt(data.results.data, hashKey.slice(0, 16)));
							var decrypted = JSON.parse(CryptoJS.AES.decrypt(rawAES, hashKey).toString(CryptoJS.enc.Utf8));

							nyanStorage.put('startClaim', Date.now());
							nyanStorage.put('claim', false);

							Util.countdown(2, 60);
							buttonClaim.addClass('disabled');

							earningValue.text(toFix(decrypted.results.total, 7) + " XLM");
							earningRefValue.text(decrypted.results.refEarn + " XLM");
							Util.showNotif("+" + decrypted.results.earn + " XLM", 3000);

							// Sync amount to Storage
							var profiles = nyanStorage.get('userProfile');
							profiles.amount = decrypted.results.total;

							// Show Adds Pop up
							if (!AppConfig.debug) {
								AdMob.prepareInterstitial(AppConfig.admobid.config.interstitialReward);

								cordova.plugins.notification.local.schedule({
									id: random(),
									title: '🔔 StellarFaucet Assistent',
									text: "You got +" + decrypted.results.earn + " XLM added to balance",
									foreground: true
								});
								cordova.plugins.notification.local.schedule({
									id: random(),
									title: '🔔 StellarFaucet Assistent',
									text: 'Hi, Claim button is already hot 🔥!',
									sound: 'file://static/alert.mp3', 
									trigger: { in: 2.1, unit: 'minute' },
									foreground: true
								});
							}

							// Setter global variable and global storage
							Profiles = profiles;
							nyanStorage.put('userProfile', profiles);

							Util.renderPrice();
							Util.trackEvent('onValidClaim');
						} else {
							try {
								window.ga.trackException('onClaimError', false);
							} catch(e) {
								App.log('onClaimError trackException error');
							}
							try	{
								if (data.message) {
									Util.showNotif("INFO: " + data.message, 3000);

									if (data.message.indexOf('already claim')) {

									}
									if (data.code == "ERRBANN") {
										Util.bannedCallback();
									}
								}
							} catch(e) {
								console.log(data.message);
							}
						}
					}, Util.ajaxErrorCallback);
				} else if (Profiles.status == "freeze") {
					Util.freezeCallback();
				} else {
					Util.bannedCallback();
				}
			}

			App.log("onClickClaim event finish");
		},
		onClickWithdrawal: function() {
			Util.trackEvent('onRequestWithdrawal');

			if (Profiles.status == "active") {

				var _token = "";
				var amountToWd = ($$('#amountWd').val() * 1);
				var profile = nyanStorage.get('userProfile');
				var withdrawalConfig = nyanStorage.get('withdrawalConfig');
				var wdLevelSelected = selectWithdrawalLevel.text();
				var withdrawalFees = wdLevel[wdLevelSelected.toLowerCase()];

				// do confirm
				if (amountToWd != 0) {
					var fromTimeout = false;
					var notifAdded = myApp.addNotification({
						message: Util.getLang({
							default: "Confirm this action, auto cancel in 5s",
							id: "Konfirmasi Permintaan withdrawal ini. Otomatis batal dalam 5 detik."
						}),
						button: {
							text: 'YES'
						},
						onClose: function() {
							if (!fromTimeout) {
								if (Profiles.twofactor) {
									_token = $$('#gauth-token').val();

									if (_token.length > 6 || _token.length < 6) {
										Util.showNotif("Google Authenticator OTP not correct", 4000);

										return false;
									}
								}

								if (amountToWd > (profile.amount + withdrawalFees)) {
									Util.showNotif(Util.getLang({
										default: "Amount withdrawal is larger than your earning amount!",
										id: "Jumlah penarikan lebih besar dari jumlah penghasilan Anda!"
									}), 5000);
								} else if (amountToWd < withdrawalConfig.min) {
									Util.showNotif(Util.getLang({
										default: "Amount withdrawal is smaller than Minimum Withdrawal!",
										id: "Jumlah penarikan lebih kecil dari Penarikan Minimum!"
									}), 5000);
								} else if (amountToWd > withdrawalConfig.max) {
									Util.showNotif(Util.getLang({
										default: "Amount withdrawal is larger than Maximum Withdrawal!",
										id: "Jumlah penarikan lebih besar dari Penarikan Maksimum!"
									}), 5000);
								} else {
									var _ajax = new Ajax({
										url: baseUrl + 'withdrawal/request/',
										method: "POST",
										auth: true,
										data: {
											amount: amountToWd.toString(),
											level: wdLevelSelected,
											otp: _token,
											email: nyanStorage.get('email')
										}
									});

									_ajax.then(function(res, status, xhr) {
										if (res.success) {
											Util.showNotif(Util.getLang({
												default: "Withdrawal request has been added",
												id: "Permintaan Penarikan telah ditambahkan"
											}), 3000);

											if (!AppConfig.debug) {
												cordova.plugins.notification.local.schedule({
													title: '🔔 StellarFaucet Assistent',
													text: "You withdrawal -" + amountToWd + " XLM successfuly added",
													foreground: true
												});
											}

											setTimeout(function() {
												myApp.pullToRefreshTrigger(faucetView);
											}, 3000);
										} else {
											try	{
												if (res.message) {
													myApp.alert("INFO: " + res.message);
												}

												if (res.code == "ERRBANN") {
													Util.bannedCallback();
												}
											} catch(e) {
												console.log(res.message);
											}
										}
									}, Util.ajaxErrorCallback);
								}
							}
						}
					});

					setTimeout(function() {
						fromTimeout = true;
						myApp.closeNotification(notifAdded);
					}, 5000);
				} else {
					Util.showNotif(Util.getLang({
						default: "Please fill amount of Doge you want to Withdrawal",
						id: "Silakan isi jumlah Dogecoin yang kamu ingin tarik."
					}), 5000);
				}
			} else if (Profiles.status == "freeze") {
				Util.freezeCallback();
			} else {
				Util.bannedCallback();
			}
		},
		onClickRewardVideo: function(event) {
			nyanStorage.put('clickPosition', {
				x: event.clientX.toString(),
				y: event.clientY.toString()
			});

			if (typeof AdMob != "undefined") {
				try {
					if (nyanStorage.get('isVideoReady')) {
						AdMob.showRewardVideoAd();
					}
				} catch(e) {
					alert(e)
				}
			} 
		},
		onClickSelectWithdrawalLevel: function(e) {
			var _self = this;
			var fees = nyanStorage.get('withdrawalConfig').fees;
			var options = [];

			if (fees) {
				Object.keys(fees).forEach(function(fee) {
					options.push({
						text: toFirstBig(fee) + " (-"+ fees[fee] + " XLM)",
						onClick: function() {
							$$(_self).text(toFirstBig(fee));
							Events.button.onSelectWithdrawalLevelChange(fee);
						}
					})
				});
			} else {
				Util.showNotif('INFO: Please close and run apps again', 4000);

				return false;
			}

			myApp.actions(options);
		},
		onSelectWithdrawalLevelChange: function(wdLevelSelected) {
			var feeWdVal = wdLevel[wdLevelSelected];
			var timeoutId = true;
			
			if (timeoutId) {
				window.clearTimeout(timeoutId);

				timeoutId = window.setTimeout(function() {
					var thisVal = $$('#amountWd').val();
					$$('#estimatedReceived').val((thisVal * 1) - feeWdVal);
				}, 500);
			}
		},
		onVerifyClick: function() {
			var tokenInput = $$('#enableTokenVerify').val();

			var _token = nyanStorage.get('signToken');
			var _ajax = new Ajax({
				url: baseUrl + "auth/gauth/verify",
				method: "POST",
				auth: true,
				data: {
					email: nyanStorage.get('email'),
					Sign: _token.sign,
					Secret: _token.secret,
					Token: tokenInput
				}
			});

			_ajax.then(function(data) {
				if (data.success) {
					var hashKey = CryptoJS.MD5(navigator.userAgent).toString();
					var rawAES = Util._compiler(CryptoJS.Rabbit.decrypt(data.results.data, hashKey.slice(0, 16)));
					var decrypted = JSON.parse(CryptoJS.AES.decrypt(rawAES, hashKey).toString(CryptoJS.enc.Utf8));

					nyanStorage.remove('signToken');

					Profiles.twofactor = true;

					nyanStorage.put('userProfile', Profiles);
					nyanStorage.put('twofactorDetail', {
						email: decrypted.results.email,
						model: decrypted.results.model	
					});

					mainView.router.back();
					Util.showNotif('2FA Successfuly activated', 3000);
				}
			}, Util.ajaxErrorCallback);
		},
		onRemoveClick: function() {
			var tokenInput = $$('#removeTokenVerify').val();

			var _token = nyanStorage.get('signToken');
			var _ajax = new Ajax({
				url: baseUrl + "auth/gauth/remove",
				method: "POST",
				auth: true,
				data: {
					email: nyanStorage.get('email'),
					otp: tokenInput
				}
			});

			_ajax.then(function(data) {
				if (data.success) {
					var hashKey = CryptoJS.MD5(navigator.userAgent).toString();
					var rawAES = Util._compiler(CryptoJS.Rabbit.decrypt(data.results.data, hashKey.slice(0, 16)));
					var decrypted = JSON.parse(CryptoJS.AES.decrypt(rawAES, hashKey).toString(CryptoJS.enc.Utf8));

					Profiles.twofactor = false;

					nyanStorage.put('userProfile', Profiles);
					nyanStorage.put('twofactorDetail', {
						email: decrypted.results.email,
						model: decrypted.results.model	
					});

					mainView.router.back()
					Util.showNotif('2FA Successfuly deactivated', 3000);
				}
			}, Util.ajaxErrorCallback);
		},
		onCancelWithdrawal: function() {
			var id = $$(this).attr('data-id');

			myApp.prompt('6 Digit Code Google Authenticator', 'Two Factor Authentication', function (otp) {
				if (otp.length > 6) {
					Util.showNotif("Google Authenticator OTP not correct", 4000);

					return false;
				} else {
					var _ajax = new Ajax({
						url: baseUrl + 'withdrawal/cancel/',
						method: 'POST',
						auth: true,
						data: {
							id: id,
							otp: otp
						}
					});

					_ajax.then(function(data) {
						if (data.success) {
							Util.showNotif("Withdrawal #" + id + " successfuly canceled", 4000);

							myApp.pullToRefreshTrigger(historyView);
						} else {
							Util.showNotif("Error while canceling withdrawal, please contact developer by email", 4000);
						}
					}, Util.ajaxErrorCallback)
				}
			});
		},
		onRateIconClick: function() {
			if (!AppConfig.debug) {
				myApp.confirm('Love this apps? Rate StellarFaucet: Free Stellar Lumen on Google Play Store', function() {
					window.open('market://details?id=org.nyandevid.StellarFaucet', '_system');
				})
			}
		},
		onSwitchButtonClick: function(e) {
			myApp.confirm(Util.getLang({
				default: "Be careful every device limited to have 2 account, more than 2 we will able to BANNED your device.",
				id: "Hati-hati setiap perangkat terbatas untuk memiliki 2 akun, lebih dari 2 kami akan dapat BANNED perangkat Anda."
			}), "Warning", function() {
		 		$$('#listContainer').addClass('hide');
		 		$$('#formContainer').removeClass('hide');
		 	});
		},
		onSelectedAccount: function(e) {
			$$('.card-account').forEach(function(item) {
		 		$$(item).removeClass('selected');
		 		$$(item).parent().parent().removeClass('selected')
		 	});

		 	$$(this).toggleClass('selected');
		 	$$(this).parent().parent().toggleClass('selected');

		 	var address = $$(this).attr('data-address');
		 	var memo = $$(this).attr('data-memo');

		 	AppConfig.loginData.address = address;
		 	AppConfig.loginData.memo = memo;

		 	App.log(AppConfig.loginData);
		},
		onReferralClick: function(e) {
			window.cordova.plugins.clipboard.copy(Profiles.referral, function() {
				Util.showNotif("Referral Code has been copy to clipboard", 3000);
			}, function() {
				Util.showNotif("Error while copy to clipboard", 3000);
			});
		}
	},
	other: {
		makeRandomNotif: function() {
			notifDOM.text('TIPS: ' + notifications[Math.floor(Math.random() * notifications.length)]);
		},
		onNotifOpen: function(data) {
			// data.notification.payload.additionalData
		}
	},
	ads: {
		onAdLoaded: function(e) {
			if (e.adType == 'rewardvideo') {
				Util.trackEvent('onRewardVideoSuccessLoaded');

		 		nyanStorage.put('isVideoReady', true);
		 		nyanStorage.put('prepareAds', false);

		 		myApp.hidePreloader();
		 		Util.showNotif("Reward ready to claim", 3000);
		 		$$('#buttonReward').removeClass('disabled');
		 	}
		},
		onAdFailLoad: function(e) {
			/**	Push analytics onAdFailLoad */
		 	window.ga.trackEvent('Apps', 'onAdFailLoad', 'Fail', 1); 

		 	if (e.adType == "rewardvideo") {
		 		myApp.hidePreloader();

				Events.rewardVideo.onAlternativeReward();
		 	} 

		 	alert(JSON.stringify(e));

		 	nyanStorage.increment('adsFail', 1);
		},
		onAdPresent: function(e) {
			if (typeof e.originalEvent !== 'undefined') e = e.originalEvent;
		 	var data = e.data || e;
		 	/** Push analytics onAdPresent */
		 	window.ga.trackEvent('Apps', 'onAdPresent', 'Hits', 1); 

		 	if (data.adType == "rewardvideo") {
		 		AppConfig._videoValidity.push(true);

		 		Events.rewardVideo.config.type = 'rewardvideo';
		 	} else if (e.adType == "interstitial") {
		 		myApp.hideIndicator();
		 		Events.rewardVideo.config.adsLoaded += 1;

		 		if (Events.rewardVideo.config.isDone) {
		 			nyanStorage.put('clickPosition', Events.rewardVideo.config.positions);
		 			nyanStorage.put('adsLoaded', Events.rewardVideo.config.adsLoaded);
					
					Events.rewardVideo.config.adsLoaded = 0;
					Events.rewardVideo.config.isDone = false;
					Events.rewardVideo.config.positions = [];
					Events.rewardVideo.onSuccess();
		 		}
		 	}

		 	nyanStorage.increment('adsPresent', 1);
		},
		onAdDismiss: function(e) {
			if (typeof e.originalEvent !== 'undefined') e = e.originalEvent;
		 	var data = e.data || e;

		 	if (data.adType == "rewardvideo") {
		 		AppConfig._videoValidity.push(true);

		 		if (AppConfig._videoValidity.length == 2) {
		 			AppConfig.isVideoValid = true

		 			Events.rewardVideo.onSuccess();
		 		} else {
		 			Events.rewardVideo.onError();
		 		}
		 	} else if (data.adType == "interstitial") {
		 		nyanStorage.increment('adsLoaded', 1);
		 	}
		}
	}
}
Date.prototype.addHours = function(h) {    
	this.setTime(this.getTime() + (h*60*60*1000)); 
	return this;   
}

var Template = function(text) {
	var noMatch = /(.)^/;
	var settings = {
		interpolate : /\{\{(.+?)\}\}/g
	};
	var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
	var escapes = {
		"'":      "'",
		'\\':     '\\',
		'\r':     'r',
		'\n':     'n',
		'\u2028': 'u2028',
		'\u2029': 'u2029'
	};
	var escapeChar = function(match) {
		return '\\' + escapes[match];
	};

	// Combine delimiters into one regular expression via alternation.
	var matcher = RegExp([
		(settings.escape || noMatch).source,
		(settings.interpolate || noMatch).source,
		(settings.evaluate || noMatch).source
		].join('|') + '|$', 'g');

	// Compile the template source, escaping string literals appropriately.
	var index = 0;
	var source = "__p+='";
	text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
		source += text.slice(index, offset).replace(escaper, escapeChar);
		index = offset + match.length;

		if (escape) {
			source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
		} else if (interpolate) {
			source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
		} else if (evaluate) {
			source += "';\n" + evaluate + "\n__p+='";
		}

		// Adobe VMs need the match returned to produce the correct offest.
		return match;
	});
	source += "';\n";

	// If a variable is not specified, place data values in local scope.
	if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

	source = "var __t,__p='',__j=Array.prototype.join," +
	"print=function(){__p+=__j.call(arguments,'');};\n" +
	source + 'return __p;\n';

	try {
		var render = new Function(settings.variable || 'obj', '_', source);
	} catch (e) {
		e.source = source;
		throw e;
	}

	var template = function(data) {
		return render.call(this, data);
	};

	// Provide the compiled source as a convenience for precompilation.
	var argument = settings.variable || 'obj';
	template.source = 'function(' + argument + '){\n' + source + '}';

	return template;
};
var Util = {
	isHumanClick: function(callback) {
		var historyOfClaimPosition = nyanStorage.get('historyOfClaimPosition');
		var historyOfClickTemp = null;
		var identifiedPosition = null;
		var historyOfClickSame = 1;
		var isShowCaptcha = false;

		if (!nyanStorage.isAvailable('historyOfClaim')) {
			nyanStorage.put('historyOfClaim', {
				isHuman: true,
				position: null,
				timestamp: Date.now()
			});
		}

		if (historyOfClaimPosition.length >= 3) {	
			for (var i in historyOfClaimPosition) {
				var position = JSON.stringify(historyOfClaimPosition[i]);

				if (position == historyOfClickTemp) {					
					if (historyOfClickSame >= 3) {
						isShowCaptcha = true;
						identifiedPosition = position;
					}

					historyOfClickSame++;
				} else {

					historyOfClickSame = 1;
				}

				historyOfClickTemp = position;
			}
		}

		var historyOfClaim = nyanStorage.get('historyOfClaim');
			
		if (!historyOfClaim.isHuman) {
			if (historyOfClaim.position != identifiedPosition) {
				isShowCaptcha = false;
			}
		}

		if (isShowCaptcha) {
			nyanStorage.put('historyOfClaim', {
				isHuman: false,
				position: identifiedPosition,
				timestamp: Date.now()
			});

			return callback(false);
		} else {
			var historyOfClaim = nyanStorage.get('historyOfClaim');
			
			if (!historyOfClaim.isHuman) {
				nyanStorage.put('historyOfClaimPosition', [historyOfClaimPosition[historyOfClaimPosition.length - 1]]);
			
				nyanStorage.put('historyOfClaim', {
					isHuman: true,
					position: identifiedPosition,
					timestamp: Date.now()
				});
			}

			return callback(true);
		}
	},
	getLang: function(texts) {
		var language = window.navigator.userLanguage || window.navigator.language;
			language = "id";
		var languages = Object.keys(texts);
		var isAvailable = languages.indexOf(language);

		return (isAvailable != -1) ? texts[language] : texts.default
	},
	countdown: function(minutes, seconds) {
		var mins = minutes;

		function tick() {
			var counter = $$('#doClaim');
			var current_minutes = mins-1
			seconds--;
			
			counter.text(current_minutes.toString() + ":" + (seconds < 10 ? "0" : "") + String(seconds));
			if (seconds > 0) {
				var timeoutId = setTimeout(tick, 1000);
				nyanStorage.put('timeoutId', timeoutId);
			} else {
				if(mins > 1){
					Util.countdown(mins-1, 60);           
				}
			}
			if (seconds == 0 && mins == 1) {
				AppConfig.countDownStop = true;
				Util.readyToClaim();
			} 
		}
		tick();
	},
	countdownReward: function(ticker) {
		$$('#tickerReward').show();

		if (typeof ticker == "number") {
			countDownDate = ticker;
		} else {
			var countDownDate = new Date();
				countDownDate = countDownDate.addHours(2);
				countDownDate = countDownDate.getTime();
		}

		// Update the count down every 1 second
		var x = setInterval(function() {
			// Get todays date and time
			var now = new Date().getTime();

			// Find the distance between now an the count down date
			var distance = countDownDate - now;

			// Time calculations for days, hours, minutes and seconds
			var days = Math.floor(distance / (1000 * 60 * 60 * 24));
			var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
			var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
			var seconds = Math.floor((distance % (1000 * 60)) / 1000);

			hours = ((hours < 10) ? '0' : '') + String(hours);
			minutes = ((minutes < 10) ? '0' : '') + String(minutes);
			seconds = ((seconds < 10) ? '0' : '') + String(seconds);

			// Output the result in an element with id="demo"
			document.getElementById("tickerReward").innerHTML = hours + ":" + minutes + ":" + seconds;

			// If the count down is over, write some text 
			if (distance < 0) {
				clearInterval(x);
				
				Events.rewardVideo.onReadyClaim()
			}
		}, 1000);

		var rewardObject = nyanStorage.get('rewardClaim');
			rewardObject.id = x;
			rewardObject.ticker = countDownDate;
			rewardObject.claim = false;

		nyanStorage.put('rewardClaim', rewardObject);
	},
	setProfile: function(profile) {
		$$('#addressInput').val(profile.address);

		earningValue.text(toFix(profile.amount, 7) + " XLM");
		referralCode.text(profile.referral);
		earningRefValue.text(profile.amountRef + " XLM");
		referralCounter.text(nyanStorage.get('referrals'));
		addressStellar.text(profile.address.substr(0, 8) + "__" + profile.address.substr(-8, 8));
		$$('.memoStellar').text(profile.memo);

		var withdrawalConfig = nyanStorage.get('withdrawalConfig');

		var progress = ((profile.amount * 1) / withdrawalConfig.min) * 100;
		var progressbar = $$('.progressbar-inline .progressbar');

		myApp.setProgressbar(progressbar, progress);

		$$('#percentValue').text(progress.toFixed(2) + "%");
		if (progress > 100) {
			$$('#percentValue').addClass('luweh');
		}

		Util.renderPrice();
	},
	getTimeDiff: function(date) {
		var today = new Date();
		var newDate = new Date(date);

		return Math.floor((today.getTime() - newDate.getTime()) / 1000);
	},
	showNotif: function(message, timeout) {
		var notifAdded = myApp.addNotification({
			message: message
		});

		setTimeout(function() {
			myApp.closeNotification(notifAdded);
		}, timeout);

		return false;
	},
	_compiler: function(decrypted) {
		var chars = [],
		decryptedArr = decrypted.toString().split('');
		while (decryptedArr.length !== 0) {
			chars.push(String.fromCharCode(parseInt(decryptedArr.splice(0, 2).join(''), 16)));
		}
		return chars.join('');
	},
	readyToClaim: function() {
		buttonClaim.removeClass("disabled");
		buttonClaim.text("Claim");

		nyanStorage.put('claim', true);
		nyanStorage.remove('startClaim');

		Util.showNotif('Now, Faucet ready to claim!', 5000);
	},
	ajaxErrorCallback: function(data) {
		var statusCode = data.status;	

		if (statusCode !== 200 || data.statusText !== "OK") {	
			switch (statusCode) {
				case 301:
					mainView.router.loadPage('login.html');

					Util.showNotif("Good News, whe have a new version of Apps. Please check on Play Store!", 6000);
				break;
				case 401:
					setTimeout(function() {
						mainView.router.loadPage('login.html');
					}, 1000);

					Util.showNotif("Sorry, please login again!", 6000);
				break;
				case 403:
					setTimeout(function() {
						mainView.router.loadPage('login.html');
					}, 1000);

					clearTimeout(window.checkEmailId);

					Util.showNotif("Sorry, session timeout. please login again!", 6000);
				break;
				case 400:

					Util.showNotif("Sorry, rejected request!", 5000);
				break;
				case 406:

					Util.showNotif("Sorry, Google Authenticator code missmatch!", 5000);
				break;	
				case 500:

					Util.showNotif("Sorry, server on maintenance!", 5000);
				break;
				case 503:

					Util.showNotif("Hold on, server on maintenance! Please wait until we finished our working.", 5000);
				break;
				default:
					if (data.statusText) {
						Util.showNotif(statusCode + ": " + data.statusText, 5000);
					} else {
						try {
							window.ga.trackException('onAjaxError', true);
						} catch(e) {
							App.log('trackException is not founds');
						}

						Util.showNotif("Sorry, we are can't connect to Server. Pelase try again later", 3000);
					}
				break;
			}
		}

		myApp.hidePreloader();
		myApp.hideIndicator();
		myApp.pullToRefreshDone();
	},
	seeTime: function() {
		if (!nyanStorage.isAvailable('startClaim')) {
			buttonClaim.removeClass('disabled');
			buttonClaim.text('Claim');
		} else {
			buttonClaim.addClass('disabled');

			var startClaim = nyanStorage.get('startClaim');
			var diffClaim = (2 * 60) - Util.getTimeDiff(startClaim);

			if (diffClaim < 0) {
				buttonClaim.removeClass('disabled');
				buttonClaim.text('Claim');
			} else {
				var minutes = Math.floor(diffClaim / 60);
				var seconds = diffClaim - minutes * 60;

				Util.countdown((minutes + 1), seconds);
			}
		}
	},
	renderPrice: function(price) {
		var amountDollar;

		if (typeof price === "undefined") {
			amountDollar = Profiles.amount * nyanStorage.get('dollar');

			earningValueDollar.text("$ " + toFix(amountDollar, 7)); 
		} else {
			amountDollar = Profiles.amount * price;
			
			earningValueDollar.text("$ " + toFix(amountDollar, 7)); 
		}
	},
	trackEvent: function(eventName) {
		try {
			window.ga.trackEvent('Apps', eventName, 'Hits', 1);
		} catch(e) {
			App.log('event tract error ' + eventName);
		}
	},
	bannedCallback: function() {
		myApp.confirm("Sorry, your account has banned automatically by Systems. Please fill this form to Appeal. Select 'OK' to copy form url.", function() {
			window.open(AppConfig.appealUrl, '_system');
		});
	},
	freezeCallback: function() {
		myApp.confirm("Sorry, your account has FREEZED. You can't Claim or Withdrawal for serveral time. Join Telegram Group for more details.", function() {
			// navigate to telegram group
			window.open('https://t.me/joinchat/FAHVlw9LGMKmdEoT-mgP6Q', '_system');
		});
	}
}


function isObject(variable) {

	return (typeof variable == "object")
}
function isArray(variable) {

	return (typeof variable == "object")
}
function limitMe(element) {
	if (element.value.length >= 6 ) {
		var token = $$(element).val();

		$$(element).val(token.substr(0, 6));
	}
}
function isEmail(mail) {
	if (/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(mail)) {
		return (true)
	}

	return (false)
}
function random() {
	
	return Math.floor(1000 + Math.random() * 9000)
}
function isUndefined(any) {
	return (typeof any == "undefined")
}
function toFirstBig(string) {
	return string.charAt(0).toUpperCase() + string.slice(1);
}
if (typeof Object.assign != 'function') {
	Object.assign = function(target) {
		'use strict';
		if (target == null) {
			throw new TypeError('Cannot convert undefined or null to object');
		}

		target = Object(target);
		for (var index = 1; index < arguments.length; index++) {
			var source = arguments[index];
			if (source != null) {
				for (var key in source) {
					if (Object.prototype.hasOwnProperty.call(source, key)) {
						target[key] = source[key];
					}
				}
			}
		}
		return target;
	};
}

if (!localStorage.getItem('_storage')) {
	nyanStorage.doMigrate();
}

/**	
 * Ajax Events 
 */
$$(document).on('ajaxStart', Events.onAjaxDetected);
$$(document).on('ajaxComplete', Events.onAjaxDetected);

/**	
 * Panel Events
 */
$$('.panel-left').on('close', Events.panel.onClose);
$$('.panel-left').on('open', Events.panel.onOpen);

/**	
 * Button Events
 */
buttonClaim.on('click', Events.button.onClickClaim);
doWithdrawalButton.on('click', Events.button.onClickWithdrawal);
boxToggle.on('click', Events.button.onClickBoxToggle);
selectWithdrawalLevel.on('click', Events.button.onClickSelectWithdrawalLevel)
$$('.rate-data').on('click', Events.button.onRateIconClick);



/**	
 * Page Events
 */
myApp.onPageInit('login', Events.page.onInitLogin);
myApp.onPageInit('news', Events.page.onInitNews);
myApp.onPageInit('donateView', Events.page.onInitDonate);
myApp.onPageInit('2fa', Events.page.onInitTwoFactory);
myApp.onPageInit('passcode', Events.page.onInitPascode);
myApp.onPageInit('referral', Events.page.onInitReferral);
myApp.onPageInit('help', Events.page.onInitHelp);
myApp.onPageInit('change', Events.page.onInitChange);

/**	
 * Tabs Events
 */
faucetView.on('tab:show', Events.tab.faucet.onShow);
faucetView.on('ptr:refresh', Events.tab.faucet.onRefresh);
historyView.on('tab:show', Events.tab.history.onShow);
historyView.on('ptr:refresh', Events.tab.history.onRefresh);
withdrawalView.on('tab:show', Events.tab.withdrawal.onShow);
extraView.on('tab:show', Events.tab.exchange.onShow);



/**
 * Event Want Push to Analytics
 */
document.addEventListener('onAdLoaded', Events.ads.onAdLoaded);
document.addEventListener('onAdFailLoad', Events.ads.onAdFailLoad);
document.addEventListener('onAdPresent', Events.ads.onAdPresent);
document.addEventListener('onAdDismiss', Events.ads.onAdDismiss);
document.addEventListener('onAdClose', function(e) {
	
});

$$(document).on('click', '#switchButton', Events.button.onSwitchButtonClick);
$$(document).on('click', '.card-account', Events.button.onSelectedAccount);
notifDOM.parent().parent().click(Events.other.makeRandomNotif);


$$(document).on('click', '#qr-code-verify', Events.button.onVerifyClick);
$$(document).on('click', '#qr-code-remove', Events.button.onRemoveClick);
$$(document).on('click', '.withdrawal-cancel', Events.button.onCancelWithdrawal);
$$(document).on('click', '#buttonReward', Events.button.onClickRewardVideo);

document.addEventListener("backbutton", Events.backButton.event, false);

String.prototype.secureMail = function() { 
	var email = this.split('@'),
	mail = email[0].substr(0, 5) + "__" + email[0].substr(-2, 2);

	return mail + '@' + email[1];
}

function toFix(numbers, length) {
	var pattern = new RegExp("\^-?\\d+(?:\\.\\d{0," + length + "})?");
	var result = numbers.toString().match(pattern)[0];
	// var descm = result.split('.')[1];

	// if (descm.length != length) {
	// 	result += Math.pow(10, (length - descm.length)).toString().replace('1', '')
	// }

	return result;
}

//fire event on app loaded
Events.init();
